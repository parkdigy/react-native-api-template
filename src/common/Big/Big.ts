/********************************************************************************************************************
 * 큰 숫자를 다루는 모듈
 * ******************************************************************************************************************/

import bigDecimal from 'js-big-decimal';
import { RoundingModes } from 'js-big-decimal/dist/node/roundingModes';

/** 숫자 앞의 0 제거 */
function removeStartingZeros(str: string) {
  return str.replace(/^0+/, '');
}

/** 숫자 뒤의 0 제거 */
function removeTrailingZeros(str: string) {
  return str.replace(/(\.0+|(?<=\.\d)0+)$/, '');
}

export default class Big {
  value: string;

  constructor(number: string | number | bigint) {
    this.value = removeStartingZeros(removeTrailingZeros(new bigDecimal(number).getValue()));
  }

  /********************************************************************************************************************
   * 값 반환
   * ******************************************************************************************************************/
  getValue = (): string => {
    return removeTrailingZeros(this.value);
  };

  /********************************************************************************************************************
   * 값 반환 (콤마 추가)
   * ******************************************************************************************************************/
  getPretty = (): string => {
    let num = bigDecimal.getPrettyValue(this.value, 3, ',');
    num = num.indexOf('.') !== -1 ? num.replace(/0+$/, '') : num;
    return num.endsWith('.') ? num.slice(0, -1) : num;
  };

  /********************************************************************************************************************
   * 더하기
   * ******************************************************************************************************************/
  add = (number: any): Big => {
    this.value = bigDecimal.add(this.value, number);
    return this;
  };

  /********************************************************************************************************************
   * 빼기
   * @param number 뺄 숫자
   * ******************************************************************************************************************/
  subtract = (number: any): Big => {
    this.value = bigDecimal.subtract(this.value, number);
    return this;
  };

  /********************************************************************************************************************
   * 나누기
   * @param number 나눌 숫자
   * @param precision 소수점 자리수
   * ******************************************************************************************************************/
  divide = (number: any, precision = 8): Big => {
    this.value = bigDecimal.divide(this.value, number, precision);
    return this;
  };

  /********************************************************************************************************************
   * 곱하기
   * @param number 곱할 숫자
   * ******************************************************************************************************************/
  multiply = (number: any): Big => {
    this.value = bigDecimal.multiply(this.value, number);
    return this;
  };

  /********************************************************************************************************************
   * 반올림
   * @param precision 소수점 자리수
   * @param mode 반올림 모드
   * ******************************************************************************************************************/
  round = (precision?: number, mode?: RoundingModes): Big => {
    this.value = bigDecimal.round(this.value, precision, mode);
    return this;
  };

  /********************************************************************************************************************
   * 올림
   * @param precision 소수점 자리수
   * ******************************************************************************************************************/
  ceil = (precision?: number): Big => {
    let v = this.value;
    if (precision) {
      const d = 10 ** precision;
      v = bigDecimal.multiply(v, d);
      v = bigDecimal.ceil(v);
      v = bigDecimal.divide(v, d, precision);
    } else {
      v = bigDecimal.ceil(v);
    }
    this.value = v;
    return this;
  };

  /********************************************************************************************************************
   * 내림
   * @param precision 소수점 자리수
   * ******************************************************************************************************************/
  floor = (precision?: number): Big => {
    let v = this.value;
    if (precision) {
      const d = 10 ** precision;
      v = bigDecimal.multiply(v, d);
      v = bigDecimal.floor(v);
      v = bigDecimal.divide(v, d, precision);
    } else {
      v = bigDecimal.floor(v);
    }
    this.value = v;
    return this;
  };

  /********************************************************************************************************************
   * 나머지 (mod)
   * @param number 나눌 숫자
   * @returns 나머지 값
   * ******************************************************************************************************************/
  mod = (number: number): Big => {
    const a = new bigDecimal(this.value);
    const b = new bigDecimal(number);

    const div = bigDecimal.divide(a.getValue(), b.getValue(), 20);
    const flooredDiv = bigDecimal.floor(div);
    const mul = bigDecimal.multiply(b.getValue(), flooredDiv);

    this.value = bigDecimal.subtract(a.getValue(), mul);
    return this;
  };

  /********************************************************************************************************************
   * 부호 변경
   * ******************************************************************************************************************/
  negate = (): Big => {
    this.value = bigDecimal.negate(this.value);
    return this;
  };

  /********************************************************************************************************************
   * 비교
   * @param number 비교할 숫자
   * @returns 1: 큼, -1: 작음, 0: 같음
   * ******************************************************************************************************************/
  compare = (number: any): 1 | -1 | 0 => bigDecimal.compareTo(this.value, number);

  /********************************************************************************************************************
   * 값이 같은지 여부
   * @param number 비교할 숫자
   * @returns 값이 같은지 여부
   * ******************************************************************************************************************/
  isEqual = (number: any) => bigDecimal.compareTo(this.value, number) === 0;

  /********************************************************************************************************************
   * 값이 큰지 여부
   * @param number 비교할 숫자
   * @returns 값이 큰지 여부
   * ******************************************************************************************************************/
  isBigger = (number: any) => bigDecimal.compareTo(this.value, number) === 1;

  /********************************************************************************************************************
   * 값이 작은지 여부
   * @param number 비교할 숫자
   * @returns 값이 작은지 여부
   * ******************************************************************************************************************/
  isSmaller = (number: any) => bigDecimal.compareTo(this.value, number) === -1;

  /********************************************************************************************************************
   * 값이 같거나 큰지 여부
   * @param number 비교할 숫자
   * @returns 값이 같거나 큰지 여부
   * ******************************************************************************************************************/
  isEqualOrBigger = (number: any) => [1, 0].includes(bigDecimal.compareTo(this.value, number));

  /********************************************************************************************************************
   * 값이 같거나 작은지 여부
   * @param number 비교할 숫자
   * @returns 값이 같거나 작은지 여부
   * ******************************************************************************************************************/
  isEqualOrSmaller = (number: any) => [-1, 0].includes(bigDecimal.compareTo(this.value, number));
}
